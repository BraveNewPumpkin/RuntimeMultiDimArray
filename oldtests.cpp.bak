#include "MultiDimArray.h"
#include <gtest/gtest.h>
#include <vector>
#include <memory>

TEST(MultiDimArraySATest,ConstructorWorks){
  size_t numArrays;
  numArrays=5;
  std::vector<std::unique_ptr<MultiDimArray<char*> > > mDAs;
//vector for holding dimExtents to pass to MultiDimArray constructor
  std::vector<size_t> extents;
  for(size_t arrayNum=0;arrayNum<numArrays;++arrayNum){
//push current array num onto the vector of extents
    extents.push_back(arrayNum);
//create MDA and store it in unique_ptr (takes care of deleting it for you)
    mDAs.push_back(std::unique_ptr<MultiDimArray<char*> >(new MultiDimArray<char*>(extents)));
//check that the number of dimensions is correct
    EXPECT_EQ(mDAs[arrayNum]->getNumDims(),arrayNum);
//check that the dimensional extents are correct
    EXPECT_EQ(extents,mDAs[arrayNum]->getDimExtents());
//caclulate the total size of all of the dimensions flattened into one
    size_t expectedTotalSize=std::accumulate(extents.begin(),extents.end(),0);
//check taht the expected total size is what is returned by getTotatlSize
    EXPECT_EQ(expectedTotalSize,mDAs[arrayNum]->getTotalSize());
  }
}

TEST(MultiDimArraySATest,Constructor_nonTerminalZeroExtent_throwsException){
  std::vector<size_t> dimExtents{1,2,3,0};
  EXPECT_NO_THROW({MultiDimArray<char*> mDA(dimExtents);});
  dimExtents={1,2,0,3};
  EXPECT_THROW({MultiDimArray<char*> mDA(dimExtents);},MultiDimArrayException);
}

TEST(MultiDimArraySATest,GetElement_zeroDims_throwsException){
  std::vector<size_t> dimExtents;
  MultiDimArray<char*> zeroDim(dimExtents);
  EXPECT_THROW({zeroDim.getElement(0);},MultiDimArrayException);
}

TEST(MultiDimArraySATest,GetElement_someDims_works){
  size_t numDims=4;
  std::vector<size_t> dimExtents{5,3,4,7,1};
  MultiDimArray<std::shared_ptr<char> > mDA(dimExtents);
  std::vector<std::shared_ptr<char> > chPtrs;
  for(size_t curDim=0;curDim<numDims;++curDim){  
    for(size_t curIndex=0;curIndex<dimExtents[curDim];++curIndex){  
      std::make_shared<char>('a');
    }
  }
  //oneDim.getElement(0)=chPtr;
  //EXPECT_EQ(*(oneDim.getElement(0)),*chPtr);
  
  
}

int main(int argc, char** argv){
  testing::InitGoogleTest(&argc,argv);
  return RUN_ALL_TESTS();
}
